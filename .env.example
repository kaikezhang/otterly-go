# ===== BACKEND CONFIGURATION =====
# OpenAI API Key (REQUIRED for backend)
# Get your API key from https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-api-key-here

# OpenAI Model (optional, defaults to gpt-3.5-turbo)
OPENAI_MODEL=gpt-3.5-turbo

# Server Port (optional, defaults to 3001)
PORT=3001

# Client URL for CORS (optional, defaults to http://localhost:5173)
CLIENT_URL=http://localhost:5173

# Node Environment (development | production)
NODE_ENV=development

# Disable rate limiting in development (optional, true | false)
DISABLE_RATE_LIMIT=false

# ===== AUTHENTICATION CONFIGURATION (Milestone 2.1) =====
# Google OAuth 2.0 Credentials (REQUIRED for authentication)
# Get these from Google Cloud Console: https://console.cloud.google.com/
# 1. Create a new project or select existing
# 2. Enable Google+ API
# 3. Go to "Credentials" → "Create Credentials" → "OAuth 2.0 Client ID"
# 4. Application type: Web application
# 5. Add authorized redirect URIs: http://localhost:3001/api/auth/google/callback
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_CALLBACK_URL=http://localhost:3001/api/auth/google/callback

# JWT Secret (REQUIRED for session tokens)
# Generate a random secret: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-jwt-secret-key-change-this-in-production

# JWT Expiration (optional, defaults to 7d)
JWT_EXPIRES_IN=7d

# Frontend URL for OAuth redirects (optional, defaults to http://localhost:5173)
FRONTEND_URL=http://localhost:5173

# ===== DATABASE CONFIGURATION =====
# PostgreSQL Database URL (REQUIRED for Milestone 1.2+)
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=public
# Example: postgresql://postgres:password@localhost:5432/otterly_go
# For development with local PostgreSQL:
DATABASE_URL=postgresql://postgres:password@localhost:5432/otterly_go
# For hosted options (choose one):
# - Supabase: Check your project settings for the connection string
# - Railway: Copy from your PostgreSQL service variables
# - Render: Copy from your PostgreSQL instance connection info

# ===== MAP CONFIGURATION (Milestone 3.1) =====
# Mapbox API Key (REQUIRED for map integration)
# Get your API key from https://www.mapbox.com/
MAPBOX_ACCESS_TOKEN=pk.your-mapbox-access-token-here

# ===== PHOTO LIBRARY CONFIGURATION (Milestone 3.3) =====
# Unsplash API Key (REQUIRED for stock photo integration)
# Get your API key from https://unsplash.com/developers
# 1. Create a developer account at https://unsplash.com/join
# 2. Go to https://unsplash.com/oauth/applications/new
# 3. Create a "Demo" app (50 requests/hour) or "Production" app (5000 requests/hour)
# 4. Copy the "Access Key" (NOT the Secret Key)
UNSPLASH_ACCESS_KEY=your-unsplash-access-key-here

# ===== FRONTEND CONFIGURATION =====
# API URL (optional, defaults to http://localhost:3001)
VITE_API_URL=http://localhost:3001

# Mapbox Access Token for frontend (REQUIRED for map display)
VITE_MAPBOX_ACCESS_TOKEN=pk.your-mapbox-access-token-here

# ===== STRIPE CONFIGURATION (Milestone 4.1) =====
# Stripe API Keys (REQUIRED for subscription system)
# Get these from Stripe Dashboard: https://dashboard.stripe.com/apikeys
# 1. Create a Stripe account at https://stripe.com
# 2. Go to Developers → API keys
# 3. Copy the "Secret key" (starts with sk_test_ for test mode)
# 4. Copy the "Publishable key" (starts with pk_test_ for test mode)
STRIPE_SECRET_KEY=sk_test_your-stripe-secret-key-here
STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable-key-here

# Stripe Webhook Secret (REQUIRED for webhook verification)
# Get this from Stripe Dashboard → Developers → Webhooks
# 1. Add endpoint: http://localhost:3001/api/webhooks/stripe
# 2. Select events to listen for (customer.subscription.*)
# 3. Copy the "Signing secret" (starts with whsec_)
STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret-here

# Stripe Price IDs (REQUIRED - create these in Stripe Dashboard)
# Create products and prices at: https://dashboard.stripe.com/products
# Pro tier: Unlimited trips, GPT-4o, export, priority support
# Team tier: Collaboration features, admin dashboard
STRIPE_PRICE_ID_PRO=price_your-pro-price-id-here
STRIPE_PRICE_ID_TEAM=price_your-team-price-id-here

# Frontend Stripe Publishable Key (same as backend)
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable-key-here

# ===== EMAIL CONFIGURATION (Milestone 4.3) =====
# Resend API Key (REQUIRED for email notifications)
# Get your API key from https://resend.com/api-keys
# 1. Sign up at https://resend.com
# 2. Go to API Keys and create a new key
# 3. Copy the API key (starts with re_)
RESEND_API_KEY=re_your-resend-api-key-here

# Email sender address (must be verified in Resend)
# For development, you can use onboarding@resend.dev
# For production, verify your domain in Resend dashboard
EMAIL_FROM=OtterlyGo <notifications@otterly-go.com>

# Weather API Key (REQUIRED for weather alerts)
# Get your API key from https://openweathermap.org/api
# 1. Sign up at https://openweathermap.org/appid
# 2. Go to API Keys and copy your key
WEATHER_API_KEY=your-openweathermap-api-key-here