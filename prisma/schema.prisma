// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table - stores user account information
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String?  @map("password_hash") // Optional: only for email/password auth (not used with Google OAuth)
  googleId         String?  @unique @map("google_id") // Google OAuth user ID
  name             String?  // Display name from Google (or custom override)
  picture          String?  // Profile picture URL from Google (or custom override)
  subscriptionTier String   @default("free") @map("subscription_tier") // 'free' | 'pro' | 'team'

  // Stripe subscription fields (Milestone 4.1)
  stripeCustomerId      String?   @unique @map("stripe_customer_id") // Stripe customer ID
  stripeSubscriptionId  String?   @unique @map("stripe_subscription_id") // Stripe subscription ID
  subscriptionStatus    String?   @map("subscription_status") // 'active' | 'canceled' | 'past_due' | 'trialing' | 'incomplete'
  subscriptionPeriodEnd DateTime? @map("subscription_period_end") // When current period ends
  tripCount             Int       @default(0) @map("trip_count") // Track usage for free tier limits

  // User preferences (Milestone 2.3)
  customName       String?  @map("custom_name") // User-customized name (overrides Google name)
  customPicture    String?  @map("custom_picture") // User-uploaded picture URL (overrides Google picture)
  emailNotifications Boolean @default(true) @map("email_notifications") // Email notifications enabled
  tripReminders    Boolean  @default(true) @map("trip_reminders") // Trip reminder notifications
  publicProfile    Boolean  @default(false) @map("public_profile") // Public profile visibility for social features

  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  trips            Trip[]

  @@map("users")
}

// Trips table - stores trip itineraries
model Trip {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  title        String
  destination  String
  startDate    DateTime? @map("start_date") // Nullable for draft trips
  endDate      DateTime? @map("end_date") // Nullable for draft trips
  dataJson     Json     @map("data_json") // Stores full trip object from frontend
  coverPhotoId String?  @map("cover_photo_id") // FK to PhotoLibrary for trip cover photo

  // Sharing fields (Milestone 3.4)
  publicShareToken String?  @unique @map("public_share_token") // UUID for public share links
  sharePassword    String?  @map("share_password") // Hashed password for protected shares (optional)
  shareExpiresAt   DateTime? @map("share_expires_at") // Optional expiration date
  shareViewCount   Int      @default(0) @map("share_view_count") // Track number of views

  // Trip management fields (Milestone 3.5)
  status        String   @default("draft") @map("status") // 'draft' | 'planning' | 'upcoming' | 'active' | 'completed' | 'archived'
  tags          String[] @default([]) @map("tags") // User-defined tags for organization
  displayOrder  Int?     @map("display_order") // Custom sort order for user
  lastViewedAt  DateTime @default(now()) @map("last_viewed_at") // Last time user viewed this trip
  archivedAt    DateTime? @map("archived_at") // When trip was archived (null if not archived)

  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  coverPhoto    PhotoLibrary? @relation("TripCoverPhoto", fields: [coverPhotoId], references: [id], onDelete: SetNull)
  tripPhotos    TripPhoto[]

  @@index([userId])
  @@index([userId, status]) // Fast filtering by user and status
  @@index([startDate]) // Fast sorting by start date
  @@index([lastViewedAt]) // Fast sorting by recent views
  @@index([coverPhotoId])
  @@index([publicShareToken])
  @@map("trips")
}

// Conversations table - stores chat history for trips
model Conversation {
  id           String   @id @default(cuid())
  tripId       String   @map("trip_id")
  messagesJson Json     @map("messages_json") // Array of ChatMessage objects
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@map("conversations")
}

// PhotoLibrary table - caches stock photos from Unsplash/Pexels (Milestone 3.3)
model PhotoLibrary {
  id              String   @id @default(cuid())
  source          String   // 'unsplash' | 'pexels' | 'custom'
  sourcePhotoId   String   @map("source_photo_id") // Original API photo ID
  query           String   // Search term used to find this photo
  urls            Json     // {raw, full, regular, small, thumb}
  attribution     Json     // {photographerName, photographerUrl, sourceUrl}
  tags            String[] // Array of keywords for search
  usageCount      Int      @default(0) @map("usage_count") // Track popularity
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  tripCoverPhotos Trip[]      @relation("TripCoverPhoto")
  tripPhotos      TripPhoto[]

  @@unique([source, sourcePhotoId]) // Prevent duplicate photos from same source
  @@index([query]) // Fast search by query
  @@index([usageCount]) // Track popular photos
  @@map("photo_library")
}

// TripPhoto table - associates photos with trips and itinerary items (Milestone 3.3)
model TripPhoto {
  id             String   @id @default(cuid())
  tripId         String   @map("trip_id")
  itemId         String?  @map("item_id") // Itinerary item ID (null for trip-level photos)
  photoId        String   @map("photo_id")
  displayContext String   @map("display_context") // 'cover' | 'header' | 'suggestion' | 'gallery'
  order          Int      @default(0) // For ordering in galleries
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  trip  Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  photo PhotoLibrary @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([photoId])
  @@index([itemId])
  @@map("trip_photos")
}
